name: DNS Trust Check

on:
  workflow_dispatch:
  schedule:
    - cron: '0 15 * * *'

jobs:
  dns_trust:
    runs-on: ubuntu-latest

    steps:
      - name: Speed up APT (skip docs/man/most locales)
        run: |
          set -euo pipefail
          echo 'path-exclude=/usr/share/man/*'            | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
          echo 'path-exclude=/usr/share/doc/*'            | sudo tee /etc/dpkg/dpkg.cfg.d/02_nodoc
          echo 'path-exclude=/usr/share/locale/*'         | sudo tee /etc/dpkg/dpkg.cfg.d/03_nolocale
          echo 'path-include=/usr/share/locale/en*'       | sudo tee -a /etc/dpkg/dpkg.cfg.d/03_nolocale
          echo 'Acquire::Retries "3";'                    | sudo tee /etc/apt/apt.conf.d/80-retries
          printf 'APT::Install-Recommends "false";\nAPT::Install-Suggests "false";\n' | sudo tee /etc/apt/apt.conf.d/90-no-recommends

      - name: Restore APT cache
        uses: actions/cache@v3
        with:
          path: ./apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Load APT cache into system
        if: always()
        run: |
          if [ -d ./apt-cache/cache ]; then
            sudo cp -a ./apt-cache/cache/* /var/cache/apt/ || true
          fi
          if [ -d ./apt-cache/lists ]; then
            sudo cp -a ./apt-cache/lists/* /var/lib/apt/lists/ || true
          fi

      - name: Install kdig (knot-dnsutils)
        run: |
          set -euo pipefail
          sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/lock
          sudo apt-get update -y
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends knot-dnsutils

      - name: Prepare APT cache for saving
        if: always()
        run: |
          rm -rf ./apt-cache
          mkdir -p ./apt-cache/cache ./apt-cache/lists
          sudo cp -a /var/cache/apt/* ./apt-cache/cache/ || true
          sudo cp -a /var/lib/apt/lists/* ./apt-cache/lists/ || true
          sudo chown -R "$USER:$USER" ./apt-cache

      - name: Save APT cache
        if: always()
        uses: actions/cache@v3
        with:
          path: ./apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-packages.txt') }}

      - name: Define Variables
        run: |
          {
            echo "SERVERS=3.39.126.146 15.165.111.52"
            echo "SERVER_NAMES=Primary Secondary"
            echo "DOH_URLS=https://one.dns.onetwohour.com/dns-query https://two.dns.onetwohour.com/dns-query"
            echo "DOH_HOSTS=one.dns.onetwohour.com two.dns.onetwohour.com"
          } >> "$GITHUB_ENV"

      - name: Warm-up DNS Query
        run: |
          set -euo pipefail
          IFS=' ' read -r -a SERVERS_ARR <<< "${SERVERS}"
          IFS=' ' read -r -a NAMES_ARR   <<< "${SERVER_NAMES}"
          for i in "${!SERVERS_ARR[@]}"; do
            server="${SERVERS_ARR[$i]}"
            name="${NAMES_ARR[$i]}"
            echo "Warming up ${name} server (${server})..."
            if kdig @"${server}" example.com +short > /dev/null 2>&1; then
              echo "‚úÖ Warm-up ${name}: SUCCESS"
            else
              echo "‚ö†Ô∏è Warm-up ${name}: FAILED"
            fi
          done

      - name: Check DNS over HTTPS (DoH)
        continue-on-error: true
        run: |
          set -euo pipefail
          IFS=' ' read -r -a URLS_ARR  <<< "${DOH_URLS}"
          IFS=' ' read -r -a HOSTS_ARR <<< "${DOH_HOSTS}"
          IFS=' ' read -r -a NAMES_ARR <<< "${SERVER_NAMES}"
          for i in "${!URLS_ARR[@]}"; do
            url="${URLS_ARR[$i]}"
            host="${HOSTS_ARR[$i]}"
            name="${NAMES_ARR[$i]}"
            echo "Checking DoH on ${name} (${url})..."
            if kdig @"${host}" +https="${url}" example.com +short > /dev/null 2>&1; then
              echo "üîí DoH ${name}: PASS"
            else
              echo "üö® DoH ${name}: FAIL"
              touch /tmp/dns_failed
            fi
          done

      - name: Check DNS over TLS (DoT)
        continue-on-error: true
        run: |
          set -euo pipefail
          IFS=' ' read -r -a SERVERS_ARR <<< "${SERVERS}"
          IFS=' ' read -r -a NAMES_ARR   <<< "${SERVER_NAMES}"
          for i in "${!SERVERS_ARR[@]}"; do
            server="${SERVERS_ARR[$i]}"
            name="${NAMES_ARR[$i]}"
            echo "Checking DoT on ${name} (${server})..."
            if kdig +tls @"${server}" example.com +short > /dev/null 2>&1; then
              echo "üîí DoT ${name}: PASS"
            else
              echo "üö® DoT ${name}: FAIL"
              touch /tmp/dns_failed
            fi
          done

      - name: Check DNS over QUIC (DoQ)
        continue-on-error: true
        run: |
          set -euo pipefail
          IFS=' ' read -r -a SERVERS_ARR <<< "${SERVERS}"
          IFS=' ' read -r -a NAMES_ARR   <<< "${SERVER_NAMES}"
          for i in "${!SERVERS_ARR[@]}"; do
            server="${SERVERS_ARR[$i]}"
            name="${NAMES_ARR[$i]}"
            echo "Checking DoQ on ${name} (${server})..."
            if kdig +quic @"${server}" example.com +short > /dev/null 2>&1; then
              echo "üîí DoQ ${name}: PASS"
            else
              echo "üö® DoQ ${name}: FAIL"
              touch /tmp/dns_failed
            fi
          done

      - name: Check DNSSEC
        continue-on-error: true
        run: |
          set -euo pipefail
          IFS=' ' read -r -a SERVERS_ARR <<< "${SERVERS}"
          IFS=' ' read -r -a NAMES_ARR   <<< "${SERVER_NAMES}"
          for i in "${!SERVERS_ARR[@]}"; do
            server="${SERVERS_ARR[$i]}"
            name="${NAMES_ARR[$i]}"
            echo "Checking DNSSEC on ${name} server (${server})..."
            if kdig +dnssec @"${server}" example.com | grep -qE 'Flags:.*\bad\b'; then
              echo "üîí DNSSEC ${name}: PASS"
            else
              echo "üö® DNSSEC ${name}: FAIL"
              touch /tmp/dns_failed
            fi
          done

      - name: Summary Report
        if: always()
        run: |
          echo "=================================="
          echo "üìä DNS Trust Check Summary"
          echo "=================================="
          echo "‚úÖ Primary DNS: 3.39.126.146 (one.dns.onetwohour.com)"
          echo "‚úÖ Secondary DNS: 15.165.111.52 (two.dns.onetwohour.com)"
          echo ""
          echo "üîç Tested Protocols:"
          echo "  ‚Ä¢ DNSSEC (DNS Security Extensions)"
          echo "  ‚Ä¢ DoH (DNS over HTTPS)"
          echo "  ‚Ä¢ DoT (DNS over TLS)"
          echo "  ‚Ä¢ DoQ (DNS over QUIC)"
          echo ""
          echo "üìÖ Check completed at: $(date)"
          echo "=================================="
          if [ -f /tmp/dns_failed ]; then
            echo "‚ùå One or more checks failed"
            exit 1
          else
            echo "‚úÖ All checks passed"
          fi
